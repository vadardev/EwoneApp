// <auto-generated />
using System;
using System.Collections.Generic;
using Ewone.Data.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ewone.Data.Migrations
{
    [DbContext(typeof(EwoneDbContext))]
    [Migration("20230213153705_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ewone.Data.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Examples")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("WordId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ParentId");

                    b.HasIndex("WordId");

                    b.ToTable("Card");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 2, 13, 15, 37, 5, 741, DateTimeKind.Utc).AddTicks(1570),
                            Definition = "a written text that can be published in printed or electronic form",
                            Examples = new List<string> { "We are reading a different book this week" },
                            ImageUrl = "https://dictionary.cambridge.org/images/thumb/book_noun_001_01679.jpg",
                            ModuleId = 1,
                            WordId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 2, 13, 15, 37, 5, 741, DateTimeKind.Utc).AddTicks(1570),
                            Definition = "a round fruit with firm, white flesh and a green, red, or yellow skin",
                            Examples = new List<string> { "The apple tree at the bottom of the garden is beginning to blossom" },
                            ImageUrl = "https://dictionary.cambridge.org/images/thumb/apple_noun_001_00650.jpg",
                            ModuleId = 1,
                            WordId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 2, 13, 15, 37, 5, 741, DateTimeKind.Utc).AddTicks(1570),
                            Definition = "a small animal with fur, four legs, a tail, and claws, usually kept as a pet or for catching mice",
                            Examples = new List<string> { "My cat likes dozing in front of the fire" },
                            ImageUrl = "https://dictionary.cambridge.org/images/thumb/cat_noun_001_02368.jpg",
                            ModuleId = 1,
                            WordId = 3
                        });
                });

            modelBuilder.Entity("Ewone.Data.Entities.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 2, 13, 15, 37, 5, 741, DateTimeKind.Utc).AddTicks(1570),
                            Name = "Default"
                        });
                });

            modelBuilder.Entity("Ewone.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ewone.Data.Entities.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Words");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 2, 13, 15, 37, 5, 741, DateTimeKind.Utc).AddTicks(1570),
                            Name = "book"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 2, 13, 15, 37, 5, 741, DateTimeKind.Utc).AddTicks(1570),
                            Name = "apple"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 2, 13, 15, 37, 5, 741, DateTimeKind.Utc).AddTicks(1570),
                            Name = "cat"
                        });
                });

            modelBuilder.Entity("Ewone.Data.Entities.Card", b =>
                {
                    b.HasOne("Ewone.Data.Entities.User", "Author")
                        .WithMany("Authors")
                        .HasForeignKey("AuthorId");

                    b.HasOne("Ewone.Data.Entities.Module", "Module")
                        .WithMany("Cards")
                        .HasForeignKey("ModuleId");

                    b.HasOne("Ewone.Data.Entities.Card", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("Ewone.Data.Entities.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Module");

                    b.Navigation("Parent");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Ewone.Data.Entities.Module", b =>
                {
                    b.HasOne("Ewone.Data.Entities.User", "User")
                        .WithMany("Modules")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ewone.Data.Entities.Module", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Ewone.Data.Entities.User", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Modules");
                });
#pragma warning restore 612, 618
        }
    }
}
